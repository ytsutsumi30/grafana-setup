services:
  # nginx - リバースプロキシ & 静的ファイル配信
  nginx:
    image: nginx:alpine
    container_name: production-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./web:/usr/share/nginx/html
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - production-api
    networks:
      - production-network

  # PostgreSQL データベース
  postgres:
    image: postgres:15-alpine
    container_name: production-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=production_db
      - POSTGRES_USER=production_user
      - POSTGRES_PASSWORD=production_pass
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - production-network

  # 生産管理API サーバー
  production-api:
    image: node:18-alpine
    container_name: production-api
    restart: unless-stopped
    working_dir: /app
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=production_db
      - DB_USER=production_user
      - DB_PASSWORD=production_pass
    volumes:
      - ./api:/app
    command: sh -c "npm install && npm start"
    depends_on:
      - postgres
    networks:
      - production-network

  # Grafana - 既存設定を維持（手動管理）
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost/grafana/
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - production-network

  # Prometheus - 既存設定を維持（手動管理）
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    profiles:
      - monitoring
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.external-url=http://localhost/prometheus/'
      - '--web.route-prefix=/prometheus/'
    networks:
      - production-network

volumes:
  grafana-storage:
  prometheus-storage:
  postgres-data:

networks:
  production-network:
    driver: bridge
